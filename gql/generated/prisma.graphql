# source: https://us1.prisma.sh/cameron-b-4d8f44/kleidi/dev
# timestamp: Sun Jan 27 2019 00:43:26 GMT-0500 (Eastern Standard Time)

type AggregateKeybotCredentials {
  count: Int!
}

type AggregateKeybotService {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum BillingType {
  ONE_TIME
  RECURRING
}

enum CloudProvider {
  AWS
  HEROKU
}

scalar DateTime

type KeybotCredentials implements Node {
  id: ID!
  forService: KeybotService
  createdAt: DateTime!
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
}

"""A connection to a list of items."""
type KeybotCredentialsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [KeybotCredentialsEdge]!
  aggregate: AggregateKeybotCredentials!
}

input KeybotCredentialsCreateInput {
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
  forService: KeybotServiceCreateOneWithoutCredentialsInput
}

input KeybotCredentialsCreateOneWithoutForServiceInput {
  create: KeybotCredentialsCreateWithoutForServiceInput
  connect: KeybotCredentialsWhereUniqueInput
}

input KeybotCredentialsCreateWithoutForServiceInput {
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
}

"""An edge in a connection."""
type KeybotCredentialsEdge {
  """The item at the end of the edge."""
  node: KeybotCredentials!

  """A cursor for use in pagination."""
  cursor: String!
}

enum KeybotCredentialsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  production_ASC
  production_DESC
  sessionSecret_ASC
  sessionSecret_DESC
  mongoUrl_ASC
  mongoUrl_DESC
  discordToken_ASC
  discordToken_DESC
  encryptionKey_ASC
  encryptionKey_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type KeybotCredentialsPreviousValues {
  id: ID!
  createdAt: DateTime!
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
}

type KeybotCredentialsSubscriptionPayload {
  mutation: MutationType!
  node: KeybotCredentials
  updatedFields: [String!]
  previousValues: KeybotCredentialsPreviousValues
}

input KeybotCredentialsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [KeybotCredentialsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [KeybotCredentialsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [KeybotCredentialsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: KeybotCredentialsWhereInput
}

input KeybotCredentialsUpdateInput {
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
  forService: KeybotServiceUpdateOneWithoutCredentialsInput
}

input KeybotCredentialsUpdateManyMutationInput {
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
}

input KeybotCredentialsUpdateOneWithoutForServiceInput {
  create: KeybotCredentialsCreateWithoutForServiceInput
  connect: KeybotCredentialsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: KeybotCredentialsUpdateWithoutForServiceDataInput
  upsert: KeybotCredentialsUpsertWithoutForServiceInput
}

input KeybotCredentialsUpdateWithoutForServiceDataInput {
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
}

input KeybotCredentialsUpsertWithoutForServiceInput {
  update: KeybotCredentialsUpdateWithoutForServiceDataInput!
  create: KeybotCredentialsCreateWithoutForServiceInput!
}

input KeybotCredentialsWhereInput {
  """Logical AND on all given filters."""
  AND: [KeybotCredentialsWhereInput!]

  """Logical OR on all given filters."""
  OR: [KeybotCredentialsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [KeybotCredentialsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  production: Boolean

  """All values that are not equal to given value."""
  production_not: Boolean
  sessionSecret: String

  """All values that are not equal to given value."""
  sessionSecret_not: String

  """All values that are contained in given list."""
  sessionSecret_in: [String!]

  """All values that are not contained in given list."""
  sessionSecret_not_in: [String!]

  """All values less than the given value."""
  sessionSecret_lt: String

  """All values less than or equal the given value."""
  sessionSecret_lte: String

  """All values greater than the given value."""
  sessionSecret_gt: String

  """All values greater than or equal the given value."""
  sessionSecret_gte: String

  """All values containing the given string."""
  sessionSecret_contains: String

  """All values not containing the given string."""
  sessionSecret_not_contains: String

  """All values starting with the given string."""
  sessionSecret_starts_with: String

  """All values not starting with the given string."""
  sessionSecret_not_starts_with: String

  """All values ending with the given string."""
  sessionSecret_ends_with: String

  """All values not ending with the given string."""
  sessionSecret_not_ends_with: String
  mongoUrl: String

  """All values that are not equal to given value."""
  mongoUrl_not: String

  """All values that are contained in given list."""
  mongoUrl_in: [String!]

  """All values that are not contained in given list."""
  mongoUrl_not_in: [String!]

  """All values less than the given value."""
  mongoUrl_lt: String

  """All values less than or equal the given value."""
  mongoUrl_lte: String

  """All values greater than the given value."""
  mongoUrl_gt: String

  """All values greater than or equal the given value."""
  mongoUrl_gte: String

  """All values containing the given string."""
  mongoUrl_contains: String

  """All values not containing the given string."""
  mongoUrl_not_contains: String

  """All values starting with the given string."""
  mongoUrl_starts_with: String

  """All values not starting with the given string."""
  mongoUrl_not_starts_with: String

  """All values ending with the given string."""
  mongoUrl_ends_with: String

  """All values not ending with the given string."""
  mongoUrl_not_ends_with: String
  discordToken: String

  """All values that are not equal to given value."""
  discordToken_not: String

  """All values that are contained in given list."""
  discordToken_in: [String!]

  """All values that are not contained in given list."""
  discordToken_not_in: [String!]

  """All values less than the given value."""
  discordToken_lt: String

  """All values less than or equal the given value."""
  discordToken_lte: String

  """All values greater than the given value."""
  discordToken_gt: String

  """All values greater than or equal the given value."""
  discordToken_gte: String

  """All values containing the given string."""
  discordToken_contains: String

  """All values not containing the given string."""
  discordToken_not_contains: String

  """All values starting with the given string."""
  discordToken_starts_with: String

  """All values not starting with the given string."""
  discordToken_not_starts_with: String

  """All values ending with the given string."""
  discordToken_ends_with: String

  """All values not ending with the given string."""
  discordToken_not_ends_with: String
  encryptionKey: String

  """All values that are not equal to given value."""
  encryptionKey_not: String

  """All values that are contained in given list."""
  encryptionKey_in: [String!]

  """All values that are not contained in given list."""
  encryptionKey_not_in: [String!]

  """All values less than the given value."""
  encryptionKey_lt: String

  """All values less than or equal the given value."""
  encryptionKey_lte: String

  """All values greater than the given value."""
  encryptionKey_gt: String

  """All values greater than or equal the given value."""
  encryptionKey_gte: String

  """All values containing the given string."""
  encryptionKey_contains: String

  """All values not containing the given string."""
  encryptionKey_not_contains: String

  """All values starting with the given string."""
  encryptionKey_starts_with: String

  """All values not starting with the given string."""
  encryptionKey_not_starts_with: String

  """All values ending with the given string."""
  encryptionKey_ends_with: String

  """All values not ending with the given string."""
  encryptionKey_not_ends_with: String
  forService: KeybotServiceWhereInput
}

input KeybotCredentialsWhereUniqueInput {
  id: ID
}

type KeybotService implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  owner: User!
  cloudProvider: CloudProvider!
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
  credentials: KeybotCredentials
}

"""A connection to a list of items."""
type KeybotServiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [KeybotServiceEdge]!
  aggregate: AggregateKeybotService!
}

input KeybotServiceCreateInput {
  name: String!
  cloudProvider: CloudProvider
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
  owner: UserCreateOneInput!
  credentials: KeybotCredentialsCreateOneWithoutForServiceInput
}

input KeybotServiceCreateOneWithoutCredentialsInput {
  create: KeybotServiceCreateWithoutCredentialsInput
  connect: KeybotServiceWhereUniqueInput
}

input KeybotServiceCreateWithoutCredentialsInput {
  name: String!
  cloudProvider: CloudProvider
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
  owner: UserCreateOneInput!
}

"""An edge in a connection."""
type KeybotServiceEdge {
  """The item at the end of the edge."""
  node: KeybotService!

  """A cursor for use in pagination."""
  cursor: String!
}

enum KeybotServiceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  cloudProvider_ASC
  cloudProvider_DESC
  cloudResourceId_ASC
  cloudResourceId_DESC
  currentOperation_ASC
  currentOperation_DESC
  currentOperationStatus_ASC
  currentOperationStatus_DESC
  currentVersion_ASC
  currentVersion_DESC
  lastDeploy_ASC
  lastDeploy_DESC
  updateType_ASC
  updateType_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type KeybotServicePreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  cloudProvider: CloudProvider!
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
}

type KeybotServiceSubscriptionPayload {
  mutation: MutationType!
  node: KeybotService
  updatedFields: [String!]
  previousValues: KeybotServicePreviousValues
}

input KeybotServiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [KeybotServiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [KeybotServiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [KeybotServiceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: KeybotServiceWhereInput
}

input KeybotServiceUpdateInput {
  name: String
  cloudProvider: CloudProvider
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
  owner: UserUpdateOneRequiredInput
  credentials: KeybotCredentialsUpdateOneWithoutForServiceInput
}

input KeybotServiceUpdateManyMutationInput {
  name: String
  cloudProvider: CloudProvider
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
}

input KeybotServiceUpdateOneWithoutCredentialsInput {
  create: KeybotServiceCreateWithoutCredentialsInput
  connect: KeybotServiceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: KeybotServiceUpdateWithoutCredentialsDataInput
  upsert: KeybotServiceUpsertWithoutCredentialsInput
}

input KeybotServiceUpdateWithoutCredentialsDataInput {
  name: String
  cloudProvider: CloudProvider
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
  owner: UserUpdateOneRequiredInput
}

input KeybotServiceUpsertWithoutCredentialsInput {
  update: KeybotServiceUpdateWithoutCredentialsDataInput!
  create: KeybotServiceCreateWithoutCredentialsInput!
}

input KeybotServiceWhereInput {
  """Logical AND on all given filters."""
  AND: [KeybotServiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [KeybotServiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [KeybotServiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  cloudProvider: CloudProvider

  """All values that are not equal to given value."""
  cloudProvider_not: CloudProvider

  """All values that are contained in given list."""
  cloudProvider_in: [CloudProvider!]

  """All values that are not contained in given list."""
  cloudProvider_not_in: [CloudProvider!]
  cloudResourceId: String

  """All values that are not equal to given value."""
  cloudResourceId_not: String

  """All values that are contained in given list."""
  cloudResourceId_in: [String!]

  """All values that are not contained in given list."""
  cloudResourceId_not_in: [String!]

  """All values less than the given value."""
  cloudResourceId_lt: String

  """All values less than or equal the given value."""
  cloudResourceId_lte: String

  """All values greater than the given value."""
  cloudResourceId_gt: String

  """All values greater than or equal the given value."""
  cloudResourceId_gte: String

  """All values containing the given string."""
  cloudResourceId_contains: String

  """All values not containing the given string."""
  cloudResourceId_not_contains: String

  """All values starting with the given string."""
  cloudResourceId_starts_with: String

  """All values not starting with the given string."""
  cloudResourceId_not_starts_with: String

  """All values ending with the given string."""
  cloudResourceId_ends_with: String

  """All values not ending with the given string."""
  cloudResourceId_not_ends_with: String
  currentOperation: OperationType

  """All values that are not equal to given value."""
  currentOperation_not: OperationType

  """All values that are contained in given list."""
  currentOperation_in: [OperationType!]

  """All values that are not contained in given list."""
  currentOperation_not_in: [OperationType!]
  currentOperationStatus: String

  """All values that are not equal to given value."""
  currentOperationStatus_not: String

  """All values that are contained in given list."""
  currentOperationStatus_in: [String!]

  """All values that are not contained in given list."""
  currentOperationStatus_not_in: [String!]

  """All values less than the given value."""
  currentOperationStatus_lt: String

  """All values less than or equal the given value."""
  currentOperationStatus_lte: String

  """All values greater than the given value."""
  currentOperationStatus_gt: String

  """All values greater than or equal the given value."""
  currentOperationStatus_gte: String

  """All values containing the given string."""
  currentOperationStatus_contains: String

  """All values not containing the given string."""
  currentOperationStatus_not_contains: String

  """All values starting with the given string."""
  currentOperationStatus_starts_with: String

  """All values not starting with the given string."""
  currentOperationStatus_not_starts_with: String

  """All values ending with the given string."""
  currentOperationStatus_ends_with: String

  """All values not ending with the given string."""
  currentOperationStatus_not_ends_with: String
  currentVersion: String

  """All values that are not equal to given value."""
  currentVersion_not: String

  """All values that are contained in given list."""
  currentVersion_in: [String!]

  """All values that are not contained in given list."""
  currentVersion_not_in: [String!]

  """All values less than the given value."""
  currentVersion_lt: String

  """All values less than or equal the given value."""
  currentVersion_lte: String

  """All values greater than the given value."""
  currentVersion_gt: String

  """All values greater than or equal the given value."""
  currentVersion_gte: String

  """All values containing the given string."""
  currentVersion_contains: String

  """All values not containing the given string."""
  currentVersion_not_contains: String

  """All values starting with the given string."""
  currentVersion_starts_with: String

  """All values not starting with the given string."""
  currentVersion_not_starts_with: String

  """All values ending with the given string."""
  currentVersion_ends_with: String

  """All values not ending with the given string."""
  currentVersion_not_ends_with: String
  lastDeploy: DateTime

  """All values that are not equal to given value."""
  lastDeploy_not: DateTime

  """All values that are contained in given list."""
  lastDeploy_in: [DateTime!]

  """All values that are not contained in given list."""
  lastDeploy_not_in: [DateTime!]

  """All values less than the given value."""
  lastDeploy_lt: DateTime

  """All values less than or equal the given value."""
  lastDeploy_lte: DateTime

  """All values greater than the given value."""
  lastDeploy_gt: DateTime

  """All values greater than or equal the given value."""
  lastDeploy_gte: DateTime
  updateType: UpdateMethod

  """All values that are not equal to given value."""
  updateType_not: UpdateMethod

  """All values that are contained in given list."""
  updateType_in: [UpdateMethod!]

  """All values that are not contained in given list."""
  updateType_not_in: [UpdateMethod!]
  owner: UserWhereInput
  credentials: KeybotCredentialsWhereInput
}

input KeybotServiceWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createProduct(data: ProductCreateInput!): Product!
  createKeybotService(data: KeybotServiceCreateInput!): KeybotService!
  createKeybotCredentials(data: KeybotCredentialsCreateInput!): KeybotCredentials!
  createRole(data: RoleCreateInput!): Role!
  createUser(data: UserCreateInput!): User!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateKeybotService(data: KeybotServiceUpdateInput!, where: KeybotServiceWhereUniqueInput!): KeybotService
  updateKeybotCredentials(data: KeybotCredentialsUpdateInput!, where: KeybotCredentialsWhereUniqueInput!): KeybotCredentials
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteKeybotService(where: KeybotServiceWhereUniqueInput!): KeybotService
  deleteKeybotCredentials(where: KeybotCredentialsWhereUniqueInput!): KeybotCredentials
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteUser(where: UserWhereUniqueInput!): User
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertKeybotService(where: KeybotServiceWhereUniqueInput!, create: KeybotServiceCreateInput!, update: KeybotServiceUpdateInput!): KeybotService!
  upsertKeybotCredentials(where: KeybotCredentialsWhereUniqueInput!, create: KeybotCredentialsCreateInput!, update: KeybotCredentialsUpdateInput!): KeybotCredentials!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyKeybotServices(data: KeybotServiceUpdateManyMutationInput!, where: KeybotServiceWhereInput): BatchPayload!
  updateManyKeybotCredentialses(data: KeybotCredentialsUpdateManyMutationInput!, where: KeybotCredentialsWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyKeybotServices(where: KeybotServiceWhereInput): BatchPayload!
  deleteManyKeybotCredentialses(where: KeybotCredentialsWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

enum OperationType {
  CREATING
  INITIALIZING
  ALLOCATING
  DEPLOYING
  RUNNING
  SHUTTING_DOWN
  IDLE
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  SYSTEM_MANAGE_ROLES
  SYSTEM_MANAGE_USERS
}

type Product implements Node {
  id: ID!
  createdAt: DateTime!
  title: String!
  active: Boolean!
  description: String
  features: [String!]!
  price: Float!
  price_currency: String!
  priceFluctuates: Boolean
  billingType: BillingType
  forService: String!
  requiresContact: Boolean!
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreatefeaturesInput {
  set: [String!]
}

input ProductCreateInput {
  title: String!
  active: Boolean
  description: String
  price: Float!
  price_currency: String!
  priceFluctuates: Boolean
  billingType: BillingType
  forService: String!
  requiresContact: Boolean
  features: ProductCreatefeaturesInput
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  active_ASC
  active_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  price_currency_ASC
  price_currency_DESC
  priceFluctuates_ASC
  priceFluctuates_DESC
  billingType_ASC
  billingType_DESC
  forService_ASC
  forService_DESC
  requiresContact_ASC
  requiresContact_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  active: Boolean!
  description: String
  features: [String!]!
  price: Float!
  price_currency: String!
  priceFluctuates: Boolean
  billingType: BillingType
  forService: String!
  requiresContact: Boolean!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdatefeaturesInput {
  set: [String!]
}

input ProductUpdateInput {
  title: String
  active: Boolean
  description: String
  price: Float
  price_currency: String
  priceFluctuates: Boolean
  billingType: BillingType
  forService: String
  requiresContact: Boolean
  features: ProductUpdatefeaturesInput
}

input ProductUpdateManyMutationInput {
  title: String
  active: Boolean
  description: String
  price: Float
  price_currency: String
  priceFluctuates: Boolean
  billingType: BillingType
  forService: String
  requiresContact: Boolean
  features: ProductUpdatefeaturesInput
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  price_currency: String

  """All values that are not equal to given value."""
  price_currency_not: String

  """All values that are contained in given list."""
  price_currency_in: [String!]

  """All values that are not contained in given list."""
  price_currency_not_in: [String!]

  """All values less than the given value."""
  price_currency_lt: String

  """All values less than or equal the given value."""
  price_currency_lte: String

  """All values greater than the given value."""
  price_currency_gt: String

  """All values greater than or equal the given value."""
  price_currency_gte: String

  """All values containing the given string."""
  price_currency_contains: String

  """All values not containing the given string."""
  price_currency_not_contains: String

  """All values starting with the given string."""
  price_currency_starts_with: String

  """All values not starting with the given string."""
  price_currency_not_starts_with: String

  """All values ending with the given string."""
  price_currency_ends_with: String

  """All values not ending with the given string."""
  price_currency_not_ends_with: String
  priceFluctuates: Boolean

  """All values that are not equal to given value."""
  priceFluctuates_not: Boolean
  billingType: BillingType

  """All values that are not equal to given value."""
  billingType_not: BillingType

  """All values that are contained in given list."""
  billingType_in: [BillingType!]

  """All values that are not contained in given list."""
  billingType_not_in: [BillingType!]
  forService: String

  """All values that are not equal to given value."""
  forService_not: String

  """All values that are contained in given list."""
  forService_in: [String!]

  """All values that are not contained in given list."""
  forService_not_in: [String!]

  """All values less than the given value."""
  forService_lt: String

  """All values less than or equal the given value."""
  forService_lte: String

  """All values greater than the given value."""
  forService_gt: String

  """All values greater than or equal the given value."""
  forService_gte: String

  """All values containing the given string."""
  forService_contains: String

  """All values not containing the given string."""
  forService_not_contains: String

  """All values starting with the given string."""
  forService_starts_with: String

  """All values not starting with the given string."""
  forService_not_starts_with: String

  """All values ending with the given string."""
  forService_ends_with: String

  """All values not ending with the given string."""
  forService_not_ends_with: String
  requiresContact: Boolean

  """All values that are not equal to given value."""
  requiresContact_not: Boolean
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  keybotServices(where: KeybotServiceWhereInput, orderBy: KeybotServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [KeybotService]!
  keybotCredentialses(where: KeybotCredentialsWhereInput, orderBy: KeybotCredentialsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [KeybotCredentials]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  product(where: ProductWhereUniqueInput!): Product
  keybotService(where: KeybotServiceWhereUniqueInput!): KeybotService
  keybotCredentials(where: KeybotCredentialsWhereUniqueInput!): KeybotCredentials
  role(where: RoleWhereUniqueInput!): Role
  user(where: UserWhereUniqueInput!): User
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  keybotServicesConnection(where: KeybotServiceWhereInput, orderBy: KeybotServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): KeybotServiceConnection!
  keybotCredentialsesConnection(where: KeybotCredentialsWhereInput, orderBy: KeybotCredentialsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): KeybotCredentialsConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Role implements Node {
  id: ID!
  createdAt: DateTime!
  permissions: [Permission!]!
  name: String!
  attachedTo(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  name: String!
  permissions: RoleCreatepermissionsInput
  attachedTo: UserCreateManyInput
}

input RoleCreateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreatepermissionsInput {
  set: [Permission!]
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RolePreviousValues {
  id: ID!
  createdAt: DateTime!
  permissions: [Permission!]!
  name: String!
}

input RoleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateDataInput {
  name: String
  permissions: RoleUpdatepermissionsInput
  attachedTo: UserUpdateManyInput
}

input RoleUpdateInput {
  name: String
  permissions: RoleUpdatepermissionsInput
  attachedTo: UserUpdateManyInput
}

input RoleUpdateManyDataInput {
  name: String
  permissions: RoleUpdatepermissionsInput
}

input RoleUpdateManyInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueNestedInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleScalarWhereInput!]
  upsert: [RoleUpsertWithWhereUniqueNestedInput!]
}

input RoleUpdateManyMutationInput {
  name: String
  permissions: RoleUpdatepermissionsInput
}

input RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput!
  data: RoleUpdateManyDataInput!
}

input RoleUpdatepermissionsInput {
  set: [Permission!]
}

input RoleUpdateWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateDataInput!
}

input RoleUpsertWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  attachedTo_every: UserWhereInput
  attachedTo_some: UserWhereInput
  attachedTo_none: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID
}

type Subscription {
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  keybotService(where: KeybotServiceSubscriptionWhereInput): KeybotServiceSubscriptionPayload
  keybotCredentials(where: KeybotCredentialsSubscriptionWhereInput): KeybotCredentialsSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

enum UpdateMethod {
  AUTOMATIC
  USER_INITIATED
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  email: String!
  salt: String!
  password: String!
  name: String!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  salt: String!
  password: String!
  name: String!
  roles: RoleCreateManyInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  salt_ASC
  salt_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  email: String!
  salt: String!
  password: String!
  name: String!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  salt: String

  """All values that are not equal to given value."""
  salt_not: String

  """All values that are contained in given list."""
  salt_in: [String!]

  """All values that are not contained in given list."""
  salt_not_in: [String!]

  """All values less than the given value."""
  salt_lt: String

  """All values less than or equal the given value."""
  salt_lte: String

  """All values greater than the given value."""
  salt_gt: String

  """All values greater than or equal the given value."""
  salt_gte: String

  """All values containing the given string."""
  salt_contains: String

  """All values not containing the given string."""
  salt_not_contains: String

  """All values starting with the given string."""
  salt_starts_with: String

  """All values not starting with the given string."""
  salt_not_starts_with: String

  """All values ending with the given string."""
  salt_ends_with: String

  """All values not ending with the given string."""
  salt_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  salt: String
  password: String
  name: String
  roles: RoleUpdateManyInput
}

input UserUpdateInput {
  email: String
  salt: String
  password: String
  name: String
  roles: RoleUpdateManyInput
}

input UserUpdateManyDataInput {
  email: String
  salt: String
  password: String
  name: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  email: String
  salt: String
  password: String
  name: String
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  salt: String

  """All values that are not equal to given value."""
  salt_not: String

  """All values that are contained in given list."""
  salt_in: [String!]

  """All values that are not contained in given list."""
  salt_not_in: [String!]

  """All values less than the given value."""
  salt_lt: String

  """All values less than or equal the given value."""
  salt_lte: String

  """All values greater than the given value."""
  salt_gt: String

  """All values greater than or equal the given value."""
  salt_gte: String

  """All values containing the given string."""
  salt_contains: String

  """All values not containing the given string."""
  salt_not_contains: String

  """All values starting with the given string."""
  salt_starts_with: String

  """All values not starting with the given string."""
  salt_not_starts_with: String

  """All values ending with the given string."""
  salt_ends_with: String

  """All values not ending with the given string."""
  salt_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  roles_every: RoleWhereInput
  roles_some: RoleWhereInput
  roles_none: RoleWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
