# source: http://192.168.99.100:4466
# timestamp: Wed Jan 30 2019 21:45:14 GMT-0500 (Eastern Standard Time)

type AggregateInvoice {
  count: Int!
}

type AggregateKeybotCredentials {
  count: Int!
}

type AggregateKeybotService {
  count: Int!
}

type AggregatePaymentMethod {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductPlan {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserBilling {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum BillingType {
  ONE_TIME
  RECURRING_STATIC
  RECURRING_USAGE_BASED
}

enum CloudProvider {
  AWS
  HEROKU
}

scalar DateTime

type Invoice implements Node {
  id: ID!
  createdAt: DateTime!
  plansInvoiced(where: ProductPlanWhereInput, orderBy: ProductPlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductPlan!]
  totalCharged: Float!
}

"""A connection to a list of items."""
type InvoiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InvoiceEdge]!
  aggregate: AggregateInvoice!
}

input InvoiceCreateInput {
  totalCharged: Float!
  plansInvoiced: ProductPlanCreateManyInput
}

input InvoiceCreateManyInput {
  create: [InvoiceCreateInput!]
  connect: [InvoiceWhereUniqueInput!]
}

"""An edge in a connection."""
type InvoiceEdge {
  """The item at the end of the edge."""
  node: Invoice!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InvoiceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  totalCharged_ASC
  totalCharged_DESC
}

type InvoicePreviousValues {
  id: ID!
  createdAt: DateTime!
  totalCharged: Float!
}

input InvoiceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  totalCharged: Float

  """All values that are not equal to given value."""
  totalCharged_not: Float

  """All values that are contained in given list."""
  totalCharged_in: [Float!]

  """All values that are not contained in given list."""
  totalCharged_not_in: [Float!]

  """All values less than the given value."""
  totalCharged_lt: Float

  """All values less than or equal the given value."""
  totalCharged_lte: Float

  """All values greater than the given value."""
  totalCharged_gt: Float

  """All values greater than or equal the given value."""
  totalCharged_gte: Float
}

type InvoiceSubscriptionPayload {
  mutation: MutationType!
  node: Invoice
  updatedFields: [String!]
  previousValues: InvoicePreviousValues
}

input InvoiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InvoiceWhereInput
}

input InvoiceUpdateDataInput {
  totalCharged: Float
  plansInvoiced: ProductPlanUpdateManyInput
}

input InvoiceUpdateInput {
  totalCharged: Float
  plansInvoiced: ProductPlanUpdateManyInput
}

input InvoiceUpdateManyDataInput {
  totalCharged: Float
}

input InvoiceUpdateManyInput {
  create: [InvoiceCreateInput!]
  connect: [InvoiceWhereUniqueInput!]
  set: [InvoiceWhereUniqueInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  delete: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueNestedInput!]
  updateMany: [InvoiceUpdateManyWithWhereNestedInput!]
  deleteMany: [InvoiceScalarWhereInput!]
  upsert: [InvoiceUpsertWithWhereUniqueNestedInput!]
}

input InvoiceUpdateManyMutationInput {
  totalCharged: Float
}

input InvoiceUpdateManyWithWhereNestedInput {
  where: InvoiceScalarWhereInput!
  data: InvoiceUpdateManyDataInput!
}

input InvoiceUpdateWithWhereUniqueNestedInput {
  where: InvoiceWhereUniqueInput!
  data: InvoiceUpdateDataInput!
}

input InvoiceUpsertWithWhereUniqueNestedInput {
  where: InvoiceWhereUniqueInput!
  update: InvoiceUpdateDataInput!
  create: InvoiceCreateInput!
}

input InvoiceWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  totalCharged: Float

  """All values that are not equal to given value."""
  totalCharged_not: Float

  """All values that are contained in given list."""
  totalCharged_in: [Float!]

  """All values that are not contained in given list."""
  totalCharged_not_in: [Float!]

  """All values less than the given value."""
  totalCharged_lt: Float

  """All values less than or equal the given value."""
  totalCharged_lte: Float

  """All values greater than the given value."""
  totalCharged_gt: Float

  """All values greater than or equal the given value."""
  totalCharged_gte: Float
  plansInvoiced_some: ProductPlanWhereInput
}

input InvoiceWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

type KeybotCredentials implements Node {
  id: ID!
  createdAt: DateTime!
  forService: KeybotService
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
}

"""A connection to a list of items."""
type KeybotCredentialsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [KeybotCredentialsEdge]!
  aggregate: AggregateKeybotCredentials!
}

input KeybotCredentialsCreateInput {
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
  forService: KeybotServiceCreateOneWithoutCredentialsInput
}

input KeybotCredentialsCreateOneWithoutForServiceInput {
  create: KeybotCredentialsCreateWithoutForServiceInput
  connect: KeybotCredentialsWhereUniqueInput
}

input KeybotCredentialsCreateWithoutForServiceInput {
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
}

"""An edge in a connection."""
type KeybotCredentialsEdge {
  """The item at the end of the edge."""
  node: KeybotCredentials!

  """A cursor for use in pagination."""
  cursor: String!
}

enum KeybotCredentialsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  production_ASC
  production_DESC
  sessionSecret_ASC
  sessionSecret_DESC
  mongoUrl_ASC
  mongoUrl_DESC
  discordToken_ASC
  discordToken_DESC
  encryptionKey_ASC
  encryptionKey_DESC
}

type KeybotCredentialsPreviousValues {
  id: ID!
  createdAt: DateTime!
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
}

type KeybotCredentialsSubscriptionPayload {
  mutation: MutationType!
  node: KeybotCredentials
  updatedFields: [String!]
  previousValues: KeybotCredentialsPreviousValues
}

input KeybotCredentialsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [KeybotCredentialsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: KeybotCredentialsWhereInput
}

input KeybotCredentialsUpdateInput {
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
  forService: KeybotServiceUpdateOneWithoutCredentialsInput
}

input KeybotCredentialsUpdateManyMutationInput {
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
}

input KeybotCredentialsUpdateOneWithoutForServiceInput {
  create: KeybotCredentialsCreateWithoutForServiceInput
  connect: KeybotCredentialsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: KeybotCredentialsUpdateWithoutForServiceDataInput
  upsert: KeybotCredentialsUpsertWithoutForServiceInput
}

input KeybotCredentialsUpdateWithoutForServiceDataInput {
  production: Boolean
  sessionSecret: String
  mongoUrl: String
  discordToken: String
  encryptionKey: String
}

input KeybotCredentialsUpsertWithoutForServiceInput {
  update: KeybotCredentialsUpdateWithoutForServiceDataInput!
  create: KeybotCredentialsCreateWithoutForServiceInput!
}

input KeybotCredentialsWhereInput {
  """Logical AND on all given filters."""
  AND: [KeybotCredentialsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  production: Boolean

  """All values that are not equal to given value."""
  production_not: Boolean
  sessionSecret: String

  """All values that are not equal to given value."""
  sessionSecret_not: String

  """All values that are contained in given list."""
  sessionSecret_in: [String!]

  """All values that are not contained in given list."""
  sessionSecret_not_in: [String!]

  """All values less than the given value."""
  sessionSecret_lt: String

  """All values less than or equal the given value."""
  sessionSecret_lte: String

  """All values greater than the given value."""
  sessionSecret_gt: String

  """All values greater than or equal the given value."""
  sessionSecret_gte: String

  """All values containing the given string."""
  sessionSecret_contains: String

  """All values not containing the given string."""
  sessionSecret_not_contains: String

  """All values starting with the given string."""
  sessionSecret_starts_with: String

  """All values not starting with the given string."""
  sessionSecret_not_starts_with: String

  """All values ending with the given string."""
  sessionSecret_ends_with: String

  """All values not ending with the given string."""
  sessionSecret_not_ends_with: String
  mongoUrl: String

  """All values that are not equal to given value."""
  mongoUrl_not: String

  """All values that are contained in given list."""
  mongoUrl_in: [String!]

  """All values that are not contained in given list."""
  mongoUrl_not_in: [String!]

  """All values less than the given value."""
  mongoUrl_lt: String

  """All values less than or equal the given value."""
  mongoUrl_lte: String

  """All values greater than the given value."""
  mongoUrl_gt: String

  """All values greater than or equal the given value."""
  mongoUrl_gte: String

  """All values containing the given string."""
  mongoUrl_contains: String

  """All values not containing the given string."""
  mongoUrl_not_contains: String

  """All values starting with the given string."""
  mongoUrl_starts_with: String

  """All values not starting with the given string."""
  mongoUrl_not_starts_with: String

  """All values ending with the given string."""
  mongoUrl_ends_with: String

  """All values not ending with the given string."""
  mongoUrl_not_ends_with: String
  discordToken: String

  """All values that are not equal to given value."""
  discordToken_not: String

  """All values that are contained in given list."""
  discordToken_in: [String!]

  """All values that are not contained in given list."""
  discordToken_not_in: [String!]

  """All values less than the given value."""
  discordToken_lt: String

  """All values less than or equal the given value."""
  discordToken_lte: String

  """All values greater than the given value."""
  discordToken_gt: String

  """All values greater than or equal the given value."""
  discordToken_gte: String

  """All values containing the given string."""
  discordToken_contains: String

  """All values not containing the given string."""
  discordToken_not_contains: String

  """All values starting with the given string."""
  discordToken_starts_with: String

  """All values not starting with the given string."""
  discordToken_not_starts_with: String

  """All values ending with the given string."""
  discordToken_ends_with: String

  """All values not ending with the given string."""
  discordToken_not_ends_with: String
  encryptionKey: String

  """All values that are not equal to given value."""
  encryptionKey_not: String

  """All values that are contained in given list."""
  encryptionKey_in: [String!]

  """All values that are not contained in given list."""
  encryptionKey_not_in: [String!]

  """All values less than the given value."""
  encryptionKey_lt: String

  """All values less than or equal the given value."""
  encryptionKey_lte: String

  """All values greater than the given value."""
  encryptionKey_gt: String

  """All values greater than or equal the given value."""
  encryptionKey_gte: String

  """All values containing the given string."""
  encryptionKey_contains: String

  """All values not containing the given string."""
  encryptionKey_not_contains: String

  """All values starting with the given string."""
  encryptionKey_starts_with: String

  """All values not starting with the given string."""
  encryptionKey_not_starts_with: String

  """All values ending with the given string."""
  encryptionKey_ends_with: String

  """All values not ending with the given string."""
  encryptionKey_not_ends_with: String
  forService: KeybotServiceWhereInput
}

input KeybotCredentialsWhereUniqueInput {
  id: ID
}

type KeybotService implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  owner: User!
  cloudProvider: CloudProvider!
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
  credentials: KeybotCredentials
  customFiles: Json
}

"""A connection to a list of items."""
type KeybotServiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [KeybotServiceEdge]!
  aggregate: AggregateKeybotService!
}

input KeybotServiceCreateInput {
  name: String!
  cloudProvider: CloudProvider
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
  customFiles: Json
  owner: UserCreateOneInput!
  credentials: KeybotCredentialsCreateOneWithoutForServiceInput
}

input KeybotServiceCreateOneWithoutCredentialsInput {
  create: KeybotServiceCreateWithoutCredentialsInput
  connect: KeybotServiceWhereUniqueInput
}

input KeybotServiceCreateWithoutCredentialsInput {
  name: String!
  cloudProvider: CloudProvider
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
  customFiles: Json
  owner: UserCreateOneInput!
}

"""An edge in a connection."""
type KeybotServiceEdge {
  """The item at the end of the edge."""
  node: KeybotService!

  """A cursor for use in pagination."""
  cursor: String!
}

enum KeybotServiceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  cloudProvider_ASC
  cloudProvider_DESC
  cloudResourceId_ASC
  cloudResourceId_DESC
  currentOperation_ASC
  currentOperation_DESC
  currentOperationStatus_ASC
  currentOperationStatus_DESC
  currentVersion_ASC
  currentVersion_DESC
  lastDeploy_ASC
  lastDeploy_DESC
  updateType_ASC
  updateType_DESC
  customFiles_ASC
  customFiles_DESC
}

type KeybotServicePreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  cloudProvider: CloudProvider!
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
  customFiles: Json
}

type KeybotServiceSubscriptionPayload {
  mutation: MutationType!
  node: KeybotService
  updatedFields: [String!]
  previousValues: KeybotServicePreviousValues
}

input KeybotServiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [KeybotServiceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: KeybotServiceWhereInput
}

input KeybotServiceUpdateInput {
  name: String
  cloudProvider: CloudProvider
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
  customFiles: Json
  owner: UserUpdateOneRequiredInput
  credentials: KeybotCredentialsUpdateOneWithoutForServiceInput
}

input KeybotServiceUpdateManyMutationInput {
  name: String
  cloudProvider: CloudProvider
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
  customFiles: Json
}

input KeybotServiceUpdateOneWithoutCredentialsInput {
  create: KeybotServiceCreateWithoutCredentialsInput
  connect: KeybotServiceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: KeybotServiceUpdateWithoutCredentialsDataInput
  upsert: KeybotServiceUpsertWithoutCredentialsInput
}

input KeybotServiceUpdateWithoutCredentialsDataInput {
  name: String
  cloudProvider: CloudProvider
  cloudResourceId: String
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
  customFiles: Json
  owner: UserUpdateOneRequiredInput
}

input KeybotServiceUpsertWithoutCredentialsInput {
  update: KeybotServiceUpdateWithoutCredentialsDataInput!
  create: KeybotServiceCreateWithoutCredentialsInput!
}

input KeybotServiceWhereInput {
  """Logical AND on all given filters."""
  AND: [KeybotServiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  cloudProvider: CloudProvider

  """All values that are not equal to given value."""
  cloudProvider_not: CloudProvider

  """All values that are contained in given list."""
  cloudProvider_in: [CloudProvider!]

  """All values that are not contained in given list."""
  cloudProvider_not_in: [CloudProvider!]
  cloudResourceId: String

  """All values that are not equal to given value."""
  cloudResourceId_not: String

  """All values that are contained in given list."""
  cloudResourceId_in: [String!]

  """All values that are not contained in given list."""
  cloudResourceId_not_in: [String!]

  """All values less than the given value."""
  cloudResourceId_lt: String

  """All values less than or equal the given value."""
  cloudResourceId_lte: String

  """All values greater than the given value."""
  cloudResourceId_gt: String

  """All values greater than or equal the given value."""
  cloudResourceId_gte: String

  """All values containing the given string."""
  cloudResourceId_contains: String

  """All values not containing the given string."""
  cloudResourceId_not_contains: String

  """All values starting with the given string."""
  cloudResourceId_starts_with: String

  """All values not starting with the given string."""
  cloudResourceId_not_starts_with: String

  """All values ending with the given string."""
  cloudResourceId_ends_with: String

  """All values not ending with the given string."""
  cloudResourceId_not_ends_with: String
  currentOperation: OperationType

  """All values that are not equal to given value."""
  currentOperation_not: OperationType

  """All values that are contained in given list."""
  currentOperation_in: [OperationType!]

  """All values that are not contained in given list."""
  currentOperation_not_in: [OperationType!]
  currentOperationStatus: String

  """All values that are not equal to given value."""
  currentOperationStatus_not: String

  """All values that are contained in given list."""
  currentOperationStatus_in: [String!]

  """All values that are not contained in given list."""
  currentOperationStatus_not_in: [String!]

  """All values less than the given value."""
  currentOperationStatus_lt: String

  """All values less than or equal the given value."""
  currentOperationStatus_lte: String

  """All values greater than the given value."""
  currentOperationStatus_gt: String

  """All values greater than or equal the given value."""
  currentOperationStatus_gte: String

  """All values containing the given string."""
  currentOperationStatus_contains: String

  """All values not containing the given string."""
  currentOperationStatus_not_contains: String

  """All values starting with the given string."""
  currentOperationStatus_starts_with: String

  """All values not starting with the given string."""
  currentOperationStatus_not_starts_with: String

  """All values ending with the given string."""
  currentOperationStatus_ends_with: String

  """All values not ending with the given string."""
  currentOperationStatus_not_ends_with: String
  currentVersion: String

  """All values that are not equal to given value."""
  currentVersion_not: String

  """All values that are contained in given list."""
  currentVersion_in: [String!]

  """All values that are not contained in given list."""
  currentVersion_not_in: [String!]

  """All values less than the given value."""
  currentVersion_lt: String

  """All values less than or equal the given value."""
  currentVersion_lte: String

  """All values greater than the given value."""
  currentVersion_gt: String

  """All values greater than or equal the given value."""
  currentVersion_gte: String

  """All values containing the given string."""
  currentVersion_contains: String

  """All values not containing the given string."""
  currentVersion_not_contains: String

  """All values starting with the given string."""
  currentVersion_starts_with: String

  """All values not starting with the given string."""
  currentVersion_not_starts_with: String

  """All values ending with the given string."""
  currentVersion_ends_with: String

  """All values not ending with the given string."""
  currentVersion_not_ends_with: String
  lastDeploy: DateTime

  """All values that are not equal to given value."""
  lastDeploy_not: DateTime

  """All values that are contained in given list."""
  lastDeploy_in: [DateTime!]

  """All values that are not contained in given list."""
  lastDeploy_not_in: [DateTime!]

  """All values less than the given value."""
  lastDeploy_lt: DateTime

  """All values less than or equal the given value."""
  lastDeploy_lte: DateTime

  """All values greater than the given value."""
  lastDeploy_gt: DateTime

  """All values greater than or equal the given value."""
  lastDeploy_gte: DateTime
  updateType: UpdateMethod

  """All values that are not equal to given value."""
  updateType_not: UpdateMethod

  """All values that are contained in given list."""
  updateType_in: [UpdateMethod!]

  """All values that are not contained in given list."""
  updateType_not_in: [UpdateMethod!]
  owner: UserWhereInput
  credentials: KeybotCredentialsWhereInput
}

input KeybotServiceWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUserBilling(data: UserBillingCreateInput!): UserBilling!
  createRole(data: RoleCreateInput!): Role!
  createProduct(data: ProductCreateInput!): Product!
  createKeybotService(data: KeybotServiceCreateInput!): KeybotService!
  createKeybotCredentials(data: KeybotCredentialsCreateInput!): KeybotCredentials!
  createUser(data: UserCreateInput!): User!
  createProductPlan(data: ProductPlanCreateInput!): ProductPlan!
  createInvoice(data: InvoiceCreateInput!): Invoice!
  createPaymentMethod(data: PaymentMethodCreateInput!): PaymentMethod!
  updateUserBilling(data: UserBillingUpdateInput!, where: UserBillingWhereUniqueInput!): UserBilling
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateKeybotService(data: KeybotServiceUpdateInput!, where: KeybotServiceWhereUniqueInput!): KeybotService
  updateKeybotCredentials(data: KeybotCredentialsUpdateInput!, where: KeybotCredentialsWhereUniqueInput!): KeybotCredentials
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProductPlan(data: ProductPlanUpdateInput!, where: ProductPlanWhereUniqueInput!): ProductPlan
  updateInvoice(data: InvoiceUpdateInput!, where: InvoiceWhereUniqueInput!): Invoice
  updatePaymentMethod(data: PaymentMethodUpdateInput!, where: PaymentMethodWhereUniqueInput!): PaymentMethod
  deleteUserBilling(where: UserBillingWhereUniqueInput!): UserBilling
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteKeybotService(where: KeybotServiceWhereUniqueInput!): KeybotService
  deleteKeybotCredentials(where: KeybotCredentialsWhereUniqueInput!): KeybotCredentials
  deleteUser(where: UserWhereUniqueInput!): User
  deleteProductPlan(where: ProductPlanWhereUniqueInput!): ProductPlan
  deleteInvoice(where: InvoiceWhereUniqueInput!): Invoice
  deletePaymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  upsertUserBilling(where: UserBillingWhereUniqueInput!, create: UserBillingCreateInput!, update: UserBillingUpdateInput!): UserBilling!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertKeybotService(where: KeybotServiceWhereUniqueInput!, create: KeybotServiceCreateInput!, update: KeybotServiceUpdateInput!): KeybotService!
  upsertKeybotCredentials(where: KeybotCredentialsWhereUniqueInput!, create: KeybotCredentialsCreateInput!, update: KeybotCredentialsUpdateInput!): KeybotCredentials!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertProductPlan(where: ProductPlanWhereUniqueInput!, create: ProductPlanCreateInput!, update: ProductPlanUpdateInput!): ProductPlan!
  upsertInvoice(where: InvoiceWhereUniqueInput!, create: InvoiceCreateInput!, update: InvoiceUpdateInput!): Invoice!
  upsertPaymentMethod(where: PaymentMethodWhereUniqueInput!, create: PaymentMethodCreateInput!, update: PaymentMethodUpdateInput!): PaymentMethod!
  updateManyUserBillings(data: UserBillingUpdateManyMutationInput!, where: UserBillingWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyKeybotServices(data: KeybotServiceUpdateManyMutationInput!, where: KeybotServiceWhereInput): BatchPayload!
  updateManyKeybotCredentialses(data: KeybotCredentialsUpdateManyMutationInput!, where: KeybotCredentialsWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyProductPlans(data: ProductPlanUpdateManyMutationInput!, where: ProductPlanWhereInput): BatchPayload!
  updateManyInvoices(data: InvoiceUpdateManyMutationInput!, where: InvoiceWhereInput): BatchPayload!
  updateManyPaymentMethods(data: PaymentMethodUpdateManyMutationInput!, where: PaymentMethodWhereInput): BatchPayload!
  deleteManyUserBillings(where: UserBillingWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyKeybotServices(where: KeybotServiceWhereInput): BatchPayload!
  deleteManyKeybotCredentialses(where: KeybotCredentialsWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyProductPlans(where: ProductPlanWhereInput): BatchPayload!
  deleteManyInvoices(where: InvoiceWhereInput): BatchPayload!
  deleteManyPaymentMethods(where: PaymentMethodWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

enum OperationType {
  CREATING
  INITIALIZING
  ALLOCATING
  DEPLOYING
  RUNNING
  SHUTTING_DOWN
  IDLE
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PaymentMethod implements Node {
  id: ID!
  createdAt: DateTime!
  stripeSourceId: String!
  cardBrand: String!
  expMonth: Int!
  expYear: Int!
  lastFour: String!
}

"""A connection to a list of items."""
type PaymentMethodConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentMethodEdge]!
  aggregate: AggregatePaymentMethod!
}

input PaymentMethodCreateInput {
  stripeSourceId: String!
  cardBrand: String!
  expMonth: Int!
  expYear: Int!
  lastFour: String!
}

input PaymentMethodCreateManyInput {
  create: [PaymentMethodCreateInput!]
  connect: [PaymentMethodWhereUniqueInput!]
}

input PaymentMethodCreateOneInput {
  create: PaymentMethodCreateInput
  connect: PaymentMethodWhereUniqueInput
}

"""An edge in a connection."""
type PaymentMethodEdge {
  """The item at the end of the edge."""
  node: PaymentMethod!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PaymentMethodOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  stripeSourceId_ASC
  stripeSourceId_DESC
  cardBrand_ASC
  cardBrand_DESC
  expMonth_ASC
  expMonth_DESC
  expYear_ASC
  expYear_DESC
  lastFour_ASC
  lastFour_DESC
}

type PaymentMethodPreviousValues {
  id: ID!
  createdAt: DateTime!
  stripeSourceId: String!
  cardBrand: String!
  expMonth: Int!
  expYear: Int!
  lastFour: String!
}

input PaymentMethodScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentMethodScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentMethodScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentMethodScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  stripeSourceId: String

  """All values that are not equal to given value."""
  stripeSourceId_not: String

  """All values that are contained in given list."""
  stripeSourceId_in: [String!]

  """All values that are not contained in given list."""
  stripeSourceId_not_in: [String!]

  """All values less than the given value."""
  stripeSourceId_lt: String

  """All values less than or equal the given value."""
  stripeSourceId_lte: String

  """All values greater than the given value."""
  stripeSourceId_gt: String

  """All values greater than or equal the given value."""
  stripeSourceId_gte: String

  """All values containing the given string."""
  stripeSourceId_contains: String

  """All values not containing the given string."""
  stripeSourceId_not_contains: String

  """All values starting with the given string."""
  stripeSourceId_starts_with: String

  """All values not starting with the given string."""
  stripeSourceId_not_starts_with: String

  """All values ending with the given string."""
  stripeSourceId_ends_with: String

  """All values not ending with the given string."""
  stripeSourceId_not_ends_with: String
  cardBrand: String

  """All values that are not equal to given value."""
  cardBrand_not: String

  """All values that are contained in given list."""
  cardBrand_in: [String!]

  """All values that are not contained in given list."""
  cardBrand_not_in: [String!]

  """All values less than the given value."""
  cardBrand_lt: String

  """All values less than or equal the given value."""
  cardBrand_lte: String

  """All values greater than the given value."""
  cardBrand_gt: String

  """All values greater than or equal the given value."""
  cardBrand_gte: String

  """All values containing the given string."""
  cardBrand_contains: String

  """All values not containing the given string."""
  cardBrand_not_contains: String

  """All values starting with the given string."""
  cardBrand_starts_with: String

  """All values not starting with the given string."""
  cardBrand_not_starts_with: String

  """All values ending with the given string."""
  cardBrand_ends_with: String

  """All values not ending with the given string."""
  cardBrand_not_ends_with: String
  expMonth: Int

  """All values that are not equal to given value."""
  expMonth_not: Int

  """All values that are contained in given list."""
  expMonth_in: [Int!]

  """All values that are not contained in given list."""
  expMonth_not_in: [Int!]

  """All values less than the given value."""
  expMonth_lt: Int

  """All values less than or equal the given value."""
  expMonth_lte: Int

  """All values greater than the given value."""
  expMonth_gt: Int

  """All values greater than or equal the given value."""
  expMonth_gte: Int
  expYear: Int

  """All values that are not equal to given value."""
  expYear_not: Int

  """All values that are contained in given list."""
  expYear_in: [Int!]

  """All values that are not contained in given list."""
  expYear_not_in: [Int!]

  """All values less than the given value."""
  expYear_lt: Int

  """All values less than or equal the given value."""
  expYear_lte: Int

  """All values greater than the given value."""
  expYear_gt: Int

  """All values greater than or equal the given value."""
  expYear_gte: Int
  lastFour: String

  """All values that are not equal to given value."""
  lastFour_not: String

  """All values that are contained in given list."""
  lastFour_in: [String!]

  """All values that are not contained in given list."""
  lastFour_not_in: [String!]

  """All values less than the given value."""
  lastFour_lt: String

  """All values less than or equal the given value."""
  lastFour_lte: String

  """All values greater than the given value."""
  lastFour_gt: String

  """All values greater than or equal the given value."""
  lastFour_gte: String

  """All values containing the given string."""
  lastFour_contains: String

  """All values not containing the given string."""
  lastFour_not_contains: String

  """All values starting with the given string."""
  lastFour_starts_with: String

  """All values not starting with the given string."""
  lastFour_not_starts_with: String

  """All values ending with the given string."""
  lastFour_ends_with: String

  """All values not ending with the given string."""
  lastFour_not_ends_with: String
}

type PaymentMethodSubscriptionPayload {
  mutation: MutationType!
  node: PaymentMethod
  updatedFields: [String!]
  previousValues: PaymentMethodPreviousValues
}

input PaymentMethodSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentMethodSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaymentMethodWhereInput
}

input PaymentMethodUpdateDataInput {
  stripeSourceId: String
  cardBrand: String
  expMonth: Int
  expYear: Int
  lastFour: String
}

input PaymentMethodUpdateInput {
  stripeSourceId: String
  cardBrand: String
  expMonth: Int
  expYear: Int
  lastFour: String
}

input PaymentMethodUpdateManyDataInput {
  stripeSourceId: String
  cardBrand: String
  expMonth: Int
  expYear: Int
  lastFour: String
}

input PaymentMethodUpdateManyInput {
  create: [PaymentMethodCreateInput!]
  connect: [PaymentMethodWhereUniqueInput!]
  set: [PaymentMethodWhereUniqueInput!]
  disconnect: [PaymentMethodWhereUniqueInput!]
  delete: [PaymentMethodWhereUniqueInput!]
  update: [PaymentMethodUpdateWithWhereUniqueNestedInput!]
  updateMany: [PaymentMethodUpdateManyWithWhereNestedInput!]
  deleteMany: [PaymentMethodScalarWhereInput!]
  upsert: [PaymentMethodUpsertWithWhereUniqueNestedInput!]
}

input PaymentMethodUpdateManyMutationInput {
  stripeSourceId: String
  cardBrand: String
  expMonth: Int
  expYear: Int
  lastFour: String
}

input PaymentMethodUpdateManyWithWhereNestedInput {
  where: PaymentMethodScalarWhereInput!
  data: PaymentMethodUpdateManyDataInput!
}

input PaymentMethodUpdateOneInput {
  create: PaymentMethodCreateInput
  connect: PaymentMethodWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PaymentMethodUpdateDataInput
  upsert: PaymentMethodUpsertNestedInput
}

input PaymentMethodUpdateWithWhereUniqueNestedInput {
  where: PaymentMethodWhereUniqueInput!
  data: PaymentMethodUpdateDataInput!
}

input PaymentMethodUpsertNestedInput {
  update: PaymentMethodUpdateDataInput!
  create: PaymentMethodCreateInput!
}

input PaymentMethodUpsertWithWhereUniqueNestedInput {
  where: PaymentMethodWhereUniqueInput!
  update: PaymentMethodUpdateDataInput!
  create: PaymentMethodCreateInput!
}

input PaymentMethodWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentMethodWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  stripeSourceId: String

  """All values that are not equal to given value."""
  stripeSourceId_not: String

  """All values that are contained in given list."""
  stripeSourceId_in: [String!]

  """All values that are not contained in given list."""
  stripeSourceId_not_in: [String!]

  """All values less than the given value."""
  stripeSourceId_lt: String

  """All values less than or equal the given value."""
  stripeSourceId_lte: String

  """All values greater than the given value."""
  stripeSourceId_gt: String

  """All values greater than or equal the given value."""
  stripeSourceId_gte: String

  """All values containing the given string."""
  stripeSourceId_contains: String

  """All values not containing the given string."""
  stripeSourceId_not_contains: String

  """All values starting with the given string."""
  stripeSourceId_starts_with: String

  """All values not starting with the given string."""
  stripeSourceId_not_starts_with: String

  """All values ending with the given string."""
  stripeSourceId_ends_with: String

  """All values not ending with the given string."""
  stripeSourceId_not_ends_with: String
  cardBrand: String

  """All values that are not equal to given value."""
  cardBrand_not: String

  """All values that are contained in given list."""
  cardBrand_in: [String!]

  """All values that are not contained in given list."""
  cardBrand_not_in: [String!]

  """All values less than the given value."""
  cardBrand_lt: String

  """All values less than or equal the given value."""
  cardBrand_lte: String

  """All values greater than the given value."""
  cardBrand_gt: String

  """All values greater than or equal the given value."""
  cardBrand_gte: String

  """All values containing the given string."""
  cardBrand_contains: String

  """All values not containing the given string."""
  cardBrand_not_contains: String

  """All values starting with the given string."""
  cardBrand_starts_with: String

  """All values not starting with the given string."""
  cardBrand_not_starts_with: String

  """All values ending with the given string."""
  cardBrand_ends_with: String

  """All values not ending with the given string."""
  cardBrand_not_ends_with: String
  expMonth: Int

  """All values that are not equal to given value."""
  expMonth_not: Int

  """All values that are contained in given list."""
  expMonth_in: [Int!]

  """All values that are not contained in given list."""
  expMonth_not_in: [Int!]

  """All values less than the given value."""
  expMonth_lt: Int

  """All values less than or equal the given value."""
  expMonth_lte: Int

  """All values greater than the given value."""
  expMonth_gt: Int

  """All values greater than or equal the given value."""
  expMonth_gte: Int
  expYear: Int

  """All values that are not equal to given value."""
  expYear_not: Int

  """All values that are contained in given list."""
  expYear_in: [Int!]

  """All values that are not contained in given list."""
  expYear_not_in: [Int!]

  """All values less than the given value."""
  expYear_lt: Int

  """All values less than or equal the given value."""
  expYear_lte: Int

  """All values greater than the given value."""
  expYear_gt: Int

  """All values greater than or equal the given value."""
  expYear_gte: Int
  lastFour: String

  """All values that are not equal to given value."""
  lastFour_not: String

  """All values that are contained in given list."""
  lastFour_in: [String!]

  """All values that are not contained in given list."""
  lastFour_not_in: [String!]

  """All values less than the given value."""
  lastFour_lt: String

  """All values less than or equal the given value."""
  lastFour_lte: String

  """All values greater than the given value."""
  lastFour_gt: String

  """All values greater than or equal the given value."""
  lastFour_gte: String

  """All values containing the given string."""
  lastFour_contains: String

  """All values not containing the given string."""
  lastFour_not_contains: String

  """All values starting with the given string."""
  lastFour_starts_with: String

  """All values not starting with the given string."""
  lastFour_not_starts_with: String

  """All values ending with the given string."""
  lastFour_ends_with: String

  """All values not ending with the given string."""
  lastFour_not_ends_with: String
}

input PaymentMethodWhereUniqueInput {
  id: ID
  stripeSourceId: String
}

enum Permission {
  SYSTEM_IS_ADMIN
  SYSTEM_MANAGE_ROLES
  SYSTEM_MANAGE_USERS
}

type Product implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  forService: ServiceType
  plans(where: ProductPlanWhereInput, orderBy: ProductPlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductPlan!]
  stripeProductId: String!
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  name: String!
  forService: ServiceType
  stripeProductId: String!
  plans: ProductPlanCreateManyWithoutProductInput
}

input ProductCreateOneWithoutPlansInput {
  create: ProductCreateWithoutPlansInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutPlansInput {
  name: String!
  forService: ServiceType
  stripeProductId: String!
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  forService_ASC
  forService_DESC
  stripeProductId_ASC
  stripeProductId_DESC
}

type ProductPlan implements Node {
  id: ID!
  createdAt: DateTime!
  title: String!
  product: Product!
  hidden: Boolean!
  active: Boolean!
  description: String
  features: [String!]!
  price: Float!
  price_currency: String!
  priceFluctuates: Boolean!
  billingType: BillingType
  serviceEntitlements: Json
  requiresContact: Boolean!
  stripePlanId: String!
}

"""A connection to a list of items."""
type ProductPlanConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductPlanEdge]!
  aggregate: AggregateProductPlan!
}

input ProductPlanCreatefeaturesInput {
  set: [String!]
}

input ProductPlanCreateInput {
  title: String!
  hidden: Boolean
  active: Boolean
  description: String
  price: Float!
  price_currency: String
  priceFluctuates: Boolean
  billingType: BillingType
  serviceEntitlements: Json
  requiresContact: Boolean
  stripePlanId: String!
  features: ProductPlanCreatefeaturesInput
  product: ProductCreateOneWithoutPlansInput!
}

input ProductPlanCreateManyInput {
  create: [ProductPlanCreateInput!]
  connect: [ProductPlanWhereUniqueInput!]
}

input ProductPlanCreateManyWithoutProductInput {
  create: [ProductPlanCreateWithoutProductInput!]
  connect: [ProductPlanWhereUniqueInput!]
}

input ProductPlanCreateWithoutProductInput {
  title: String!
  hidden: Boolean
  active: Boolean
  description: String
  price: Float!
  price_currency: String
  priceFluctuates: Boolean
  billingType: BillingType
  serviceEntitlements: Json
  requiresContact: Boolean
  stripePlanId: String!
  features: ProductPlanCreatefeaturesInput
}

"""An edge in a connection."""
type ProductPlanEdge {
  """The item at the end of the edge."""
  node: ProductPlan!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductPlanOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  hidden_ASC
  hidden_DESC
  active_ASC
  active_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  price_currency_ASC
  price_currency_DESC
  priceFluctuates_ASC
  priceFluctuates_DESC
  billingType_ASC
  billingType_DESC
  serviceEntitlements_ASC
  serviceEntitlements_DESC
  requiresContact_ASC
  requiresContact_DESC
  stripePlanId_ASC
  stripePlanId_DESC
}

type ProductPlanPreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  hidden: Boolean!
  active: Boolean!
  description: String
  features: [String!]!
  price: Float!
  price_currency: String!
  priceFluctuates: Boolean!
  billingType: BillingType
  serviceEntitlements: Json
  requiresContact: Boolean!
  stripePlanId: String!
}

input ProductPlanScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductPlanScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductPlanScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductPlanScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  hidden: Boolean

  """All values that are not equal to given value."""
  hidden_not: Boolean
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  price_currency: String

  """All values that are not equal to given value."""
  price_currency_not: String

  """All values that are contained in given list."""
  price_currency_in: [String!]

  """All values that are not contained in given list."""
  price_currency_not_in: [String!]

  """All values less than the given value."""
  price_currency_lt: String

  """All values less than or equal the given value."""
  price_currency_lte: String

  """All values greater than the given value."""
  price_currency_gt: String

  """All values greater than or equal the given value."""
  price_currency_gte: String

  """All values containing the given string."""
  price_currency_contains: String

  """All values not containing the given string."""
  price_currency_not_contains: String

  """All values starting with the given string."""
  price_currency_starts_with: String

  """All values not starting with the given string."""
  price_currency_not_starts_with: String

  """All values ending with the given string."""
  price_currency_ends_with: String

  """All values not ending with the given string."""
  price_currency_not_ends_with: String
  priceFluctuates: Boolean

  """All values that are not equal to given value."""
  priceFluctuates_not: Boolean
  billingType: BillingType

  """All values that are not equal to given value."""
  billingType_not: BillingType

  """All values that are contained in given list."""
  billingType_in: [BillingType!]

  """All values that are not contained in given list."""
  billingType_not_in: [BillingType!]
  requiresContact: Boolean

  """All values that are not equal to given value."""
  requiresContact_not: Boolean
  stripePlanId: String

  """All values that are not equal to given value."""
  stripePlanId_not: String

  """All values that are contained in given list."""
  stripePlanId_in: [String!]

  """All values that are not contained in given list."""
  stripePlanId_not_in: [String!]

  """All values less than the given value."""
  stripePlanId_lt: String

  """All values less than or equal the given value."""
  stripePlanId_lte: String

  """All values greater than the given value."""
  stripePlanId_gt: String

  """All values greater than or equal the given value."""
  stripePlanId_gte: String

  """All values containing the given string."""
  stripePlanId_contains: String

  """All values not containing the given string."""
  stripePlanId_not_contains: String

  """All values starting with the given string."""
  stripePlanId_starts_with: String

  """All values not starting with the given string."""
  stripePlanId_not_starts_with: String

  """All values ending with the given string."""
  stripePlanId_ends_with: String

  """All values not ending with the given string."""
  stripePlanId_not_ends_with: String
}

type ProductPlanSubscriptionPayload {
  mutation: MutationType!
  node: ProductPlan
  updatedFields: [String!]
  previousValues: ProductPlanPreviousValues
}

input ProductPlanSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductPlanSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductPlanWhereInput
}

input ProductPlanUpdateDataInput {
  title: String
  hidden: Boolean
  active: Boolean
  description: String
  price: Float
  price_currency: String
  priceFluctuates: Boolean
  billingType: BillingType
  serviceEntitlements: Json
  requiresContact: Boolean
  stripePlanId: String
  features: ProductPlanUpdatefeaturesInput
  product: ProductUpdateOneRequiredWithoutPlansInput
}

input ProductPlanUpdatefeaturesInput {
  set: [String!]
}

input ProductPlanUpdateInput {
  title: String
  hidden: Boolean
  active: Boolean
  description: String
  price: Float
  price_currency: String
  priceFluctuates: Boolean
  billingType: BillingType
  serviceEntitlements: Json
  requiresContact: Boolean
  stripePlanId: String
  features: ProductPlanUpdatefeaturesInput
  product: ProductUpdateOneRequiredWithoutPlansInput
}

input ProductPlanUpdateManyDataInput {
  title: String
  hidden: Boolean
  active: Boolean
  description: String
  price: Float
  price_currency: String
  priceFluctuates: Boolean
  billingType: BillingType
  serviceEntitlements: Json
  requiresContact: Boolean
  stripePlanId: String
  features: ProductPlanUpdatefeaturesInput
}

input ProductPlanUpdateManyInput {
  create: [ProductPlanCreateInput!]
  connect: [ProductPlanWhereUniqueInput!]
  set: [ProductPlanWhereUniqueInput!]
  disconnect: [ProductPlanWhereUniqueInput!]
  delete: [ProductPlanWhereUniqueInput!]
  update: [ProductPlanUpdateWithWhereUniqueNestedInput!]
  updateMany: [ProductPlanUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductPlanScalarWhereInput!]
  upsert: [ProductPlanUpsertWithWhereUniqueNestedInput!]
}

input ProductPlanUpdateManyMutationInput {
  title: String
  hidden: Boolean
  active: Boolean
  description: String
  price: Float
  price_currency: String
  priceFluctuates: Boolean
  billingType: BillingType
  serviceEntitlements: Json
  requiresContact: Boolean
  stripePlanId: String
  features: ProductPlanUpdatefeaturesInput
}

input ProductPlanUpdateManyWithoutProductInput {
  create: [ProductPlanCreateWithoutProductInput!]
  connect: [ProductPlanWhereUniqueInput!]
  set: [ProductPlanWhereUniqueInput!]
  disconnect: [ProductPlanWhereUniqueInput!]
  delete: [ProductPlanWhereUniqueInput!]
  update: [ProductPlanUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductPlanUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductPlanScalarWhereInput!]
  upsert: [ProductPlanUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductPlanUpdateManyWithWhereNestedInput {
  where: ProductPlanScalarWhereInput!
  data: ProductPlanUpdateManyDataInput!
}

input ProductPlanUpdateWithoutProductDataInput {
  title: String
  hidden: Boolean
  active: Boolean
  description: String
  price: Float
  price_currency: String
  priceFluctuates: Boolean
  billingType: BillingType
  serviceEntitlements: Json
  requiresContact: Boolean
  stripePlanId: String
  features: ProductPlanUpdatefeaturesInput
}

input ProductPlanUpdateWithWhereUniqueNestedInput {
  where: ProductPlanWhereUniqueInput!
  data: ProductPlanUpdateDataInput!
}

input ProductPlanUpdateWithWhereUniqueWithoutProductInput {
  where: ProductPlanWhereUniqueInput!
  data: ProductPlanUpdateWithoutProductDataInput!
}

input ProductPlanUpsertWithWhereUniqueNestedInput {
  where: ProductPlanWhereUniqueInput!
  update: ProductPlanUpdateDataInput!
  create: ProductPlanCreateInput!
}

input ProductPlanUpsertWithWhereUniqueWithoutProductInput {
  where: ProductPlanWhereUniqueInput!
  update: ProductPlanUpdateWithoutProductDataInput!
  create: ProductPlanCreateWithoutProductInput!
}

input ProductPlanWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductPlanWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  hidden: Boolean

  """All values that are not equal to given value."""
  hidden_not: Boolean
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  price_currency: String

  """All values that are not equal to given value."""
  price_currency_not: String

  """All values that are contained in given list."""
  price_currency_in: [String!]

  """All values that are not contained in given list."""
  price_currency_not_in: [String!]

  """All values less than the given value."""
  price_currency_lt: String

  """All values less than or equal the given value."""
  price_currency_lte: String

  """All values greater than the given value."""
  price_currency_gt: String

  """All values greater than or equal the given value."""
  price_currency_gte: String

  """All values containing the given string."""
  price_currency_contains: String

  """All values not containing the given string."""
  price_currency_not_contains: String

  """All values starting with the given string."""
  price_currency_starts_with: String

  """All values not starting with the given string."""
  price_currency_not_starts_with: String

  """All values ending with the given string."""
  price_currency_ends_with: String

  """All values not ending with the given string."""
  price_currency_not_ends_with: String
  priceFluctuates: Boolean

  """All values that are not equal to given value."""
  priceFluctuates_not: Boolean
  billingType: BillingType

  """All values that are not equal to given value."""
  billingType_not: BillingType

  """All values that are contained in given list."""
  billingType_in: [BillingType!]

  """All values that are not contained in given list."""
  billingType_not_in: [BillingType!]
  requiresContact: Boolean

  """All values that are not equal to given value."""
  requiresContact_not: Boolean
  stripePlanId: String

  """All values that are not equal to given value."""
  stripePlanId_not: String

  """All values that are contained in given list."""
  stripePlanId_in: [String!]

  """All values that are not contained in given list."""
  stripePlanId_not_in: [String!]

  """All values less than the given value."""
  stripePlanId_lt: String

  """All values less than or equal the given value."""
  stripePlanId_lte: String

  """All values greater than the given value."""
  stripePlanId_gt: String

  """All values greater than or equal the given value."""
  stripePlanId_gte: String

  """All values containing the given string."""
  stripePlanId_contains: String

  """All values not containing the given string."""
  stripePlanId_not_contains: String

  """All values starting with the given string."""
  stripePlanId_starts_with: String

  """All values not starting with the given string."""
  stripePlanId_not_starts_with: String

  """All values ending with the given string."""
  stripePlanId_ends_with: String

  """All values not ending with the given string."""
  stripePlanId_not_ends_with: String
  product: ProductWhereInput
}

input ProductPlanWhereUniqueInput {
  id: ID
}

type ProductPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  forService: ServiceType
  stripeProductId: String!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateInput {
  name: String
  forService: ServiceType
  stripeProductId: String
  plans: ProductPlanUpdateManyWithoutProductInput
}

input ProductUpdateManyMutationInput {
  name: String
  forService: ServiceType
  stripeProductId: String
}

input ProductUpdateOneRequiredWithoutPlansInput {
  create: ProductCreateWithoutPlansInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutPlansDataInput
  upsert: ProductUpsertWithoutPlansInput
}

input ProductUpdateWithoutPlansDataInput {
  name: String
  forService: ServiceType
  stripeProductId: String
}

input ProductUpsertWithoutPlansInput {
  update: ProductUpdateWithoutPlansDataInput!
  create: ProductCreateWithoutPlansInput!
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  forService: ServiceType

  """All values that are not equal to given value."""
  forService_not: ServiceType

  """All values that are contained in given list."""
  forService_in: [ServiceType!]

  """All values that are not contained in given list."""
  forService_not_in: [ServiceType!]
  stripeProductId: String

  """All values that are not equal to given value."""
  stripeProductId_not: String

  """All values that are contained in given list."""
  stripeProductId_in: [String!]

  """All values that are not contained in given list."""
  stripeProductId_not_in: [String!]

  """All values less than the given value."""
  stripeProductId_lt: String

  """All values less than or equal the given value."""
  stripeProductId_lte: String

  """All values greater than the given value."""
  stripeProductId_gt: String

  """All values greater than or equal the given value."""
  stripeProductId_gte: String

  """All values containing the given string."""
  stripeProductId_contains: String

  """All values not containing the given string."""
  stripeProductId_not_contains: String

  """All values starting with the given string."""
  stripeProductId_starts_with: String

  """All values not starting with the given string."""
  stripeProductId_not_starts_with: String

  """All values ending with the given string."""
  stripeProductId_ends_with: String

  """All values not ending with the given string."""
  stripeProductId_not_ends_with: String
  plans_some: ProductPlanWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  userBillings(where: UserBillingWhereInput, orderBy: UserBillingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserBilling]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  keybotServices(where: KeybotServiceWhereInput, orderBy: KeybotServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [KeybotService]!
  keybotCredentialses(where: KeybotCredentialsWhereInput, orderBy: KeybotCredentialsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [KeybotCredentials]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  productPlans(where: ProductPlanWhereInput, orderBy: ProductPlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductPlan]!
  invoices(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Invoice]!
  paymentMethods(where: PaymentMethodWhereInput, orderBy: PaymentMethodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentMethod]!
  userBilling(where: UserBillingWhereUniqueInput!): UserBilling
  role(where: RoleWhereUniqueInput!): Role
  product(where: ProductWhereUniqueInput!): Product
  keybotService(where: KeybotServiceWhereUniqueInput!): KeybotService
  keybotCredentials(where: KeybotCredentialsWhereUniqueInput!): KeybotCredentials
  user(where: UserWhereUniqueInput!): User
  productPlan(where: ProductPlanWhereUniqueInput!): ProductPlan
  invoice(where: InvoiceWhereUniqueInput!): Invoice
  paymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  userBillingsConnection(where: UserBillingWhereInput, orderBy: UserBillingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserBillingConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  keybotServicesConnection(where: KeybotServiceWhereInput, orderBy: KeybotServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): KeybotServiceConnection!
  keybotCredentialsesConnection(where: KeybotCredentialsWhereInput, orderBy: KeybotCredentialsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): KeybotCredentialsConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  productPlansConnection(where: ProductPlanWhereInput, orderBy: ProductPlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductPlanConnection!
  invoicesConnection(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InvoiceConnection!
  paymentMethodsConnection(where: PaymentMethodWhereInput, orderBy: PaymentMethodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentMethodConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Role implements Node {
  id: ID!
  createdAt: DateTime!
  permissions: [Permission!]!
  name: String!
  attachedTo(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  name: String!
  permissions: RoleCreatepermissionsInput
  attachedTo: UserCreateManyWithoutRolesInput
}

input RoleCreateManyWithoutAttachedToInput {
  create: [RoleCreateWithoutAttachedToInput!]
  connect: [RoleWhereUniqueInput!]
}

input RoleCreatepermissionsInput {
  set: [Permission!]
}

input RoleCreateWithoutAttachedToInput {
  name: String!
  permissions: RoleCreatepermissionsInput
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
}

type RolePreviousValues {
  id: ID!
  createdAt: DateTime!
  permissions: [Permission!]!
  name: String!
}

input RoleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateInput {
  name: String
  permissions: RoleUpdatepermissionsInput
  attachedTo: UserUpdateManyWithoutRolesInput
}

input RoleUpdateManyDataInput {
  name: String
  permissions: RoleUpdatepermissionsInput
}

input RoleUpdateManyMutationInput {
  name: String
  permissions: RoleUpdatepermissionsInput
}

input RoleUpdateManyWithoutAttachedToInput {
  create: [RoleCreateWithoutAttachedToInput!]
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutAttachedToInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleScalarWhereInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutAttachedToInput!]
}

input RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput!
  data: RoleUpdateManyDataInput!
}

input RoleUpdatepermissionsInput {
  set: [Permission!]
}

input RoleUpdateWithoutAttachedToDataInput {
  name: String
  permissions: RoleUpdatepermissionsInput
}

input RoleUpdateWithWhereUniqueWithoutAttachedToInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutAttachedToDataInput!
}

input RoleUpsertWithWhereUniqueWithoutAttachedToInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutAttachedToDataInput!
  create: RoleCreateWithoutAttachedToInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  attachedTo_some: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID
}

enum ServiceType {
  KEYBOT
}

type Subscription {
  userBilling(where: UserBillingSubscriptionWhereInput): UserBillingSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  keybotService(where: KeybotServiceSubscriptionWhereInput): KeybotServiceSubscriptionPayload
  keybotCredentials(where: KeybotCredentialsSubscriptionWhereInput): KeybotCredentialsSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  productPlan(where: ProductPlanSubscriptionWhereInput): ProductPlanSubscriptionPayload
  invoice(where: InvoiceSubscriptionWhereInput): InvoiceSubscriptionPayload
  paymentMethod(where: PaymentMethodSubscriptionWhereInput): PaymentMethodSubscriptionPayload
}

enum UpdateMethod {
  AUTOMATIC
  USER_INITIATED
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  email: String!
  activated: Boolean!
  activationKey: String
  salt: String!
  password: String!
  name: String!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role!]
  billing: UserBilling
}

type UserBilling implements Node {
  id: ID!
  createdAt: DateTime!
  stripeCustomerId: String!
  defaultPaymentMethod: PaymentMethod
  paymentMethods(where: PaymentMethodWhereInput, orderBy: PaymentMethodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentMethod!]
  associatedPlans(where: ProductPlanWhereInput, orderBy: ProductPlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductPlan!]
  invoices(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Invoice!]
  forUser: User!
}

"""A connection to a list of items."""
type UserBillingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserBillingEdge]!
  aggregate: AggregateUserBilling!
}

input UserBillingCreateInput {
  stripeCustomerId: String!
  defaultPaymentMethod: PaymentMethodCreateOneInput
  paymentMethods: PaymentMethodCreateManyInput
  associatedPlans: ProductPlanCreateManyInput
  invoices: InvoiceCreateManyInput
  forUser: UserCreateOneWithoutBillingInput!
}

input UserBillingCreateOneWithoutForUserInput {
  create: UserBillingCreateWithoutForUserInput
  connect: UserBillingWhereUniqueInput
}

input UserBillingCreateWithoutForUserInput {
  stripeCustomerId: String!
  defaultPaymentMethod: PaymentMethodCreateOneInput
  paymentMethods: PaymentMethodCreateManyInput
  associatedPlans: ProductPlanCreateManyInput
  invoices: InvoiceCreateManyInput
}

"""An edge in a connection."""
type UserBillingEdge {
  """The item at the end of the edge."""
  node: UserBilling!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserBillingOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  stripeCustomerId_ASC
  stripeCustomerId_DESC
}

type UserBillingPreviousValues {
  id: ID!
  createdAt: DateTime!
  stripeCustomerId: String!
}

type UserBillingSubscriptionPayload {
  mutation: MutationType!
  node: UserBilling
  updatedFields: [String!]
  previousValues: UserBillingPreviousValues
}

input UserBillingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserBillingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserBillingWhereInput
}

input UserBillingUpdateInput {
  stripeCustomerId: String
  defaultPaymentMethod: PaymentMethodUpdateOneInput
  paymentMethods: PaymentMethodUpdateManyInput
  associatedPlans: ProductPlanUpdateManyInput
  invoices: InvoiceUpdateManyInput
  forUser: UserUpdateOneRequiredWithoutBillingInput
}

input UserBillingUpdateManyMutationInput {
  stripeCustomerId: String
}

input UserBillingUpdateOneWithoutForUserInput {
  create: UserBillingCreateWithoutForUserInput
  connect: UserBillingWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserBillingUpdateWithoutForUserDataInput
  upsert: UserBillingUpsertWithoutForUserInput
}

input UserBillingUpdateWithoutForUserDataInput {
  stripeCustomerId: String
  defaultPaymentMethod: PaymentMethodUpdateOneInput
  paymentMethods: PaymentMethodUpdateManyInput
  associatedPlans: ProductPlanUpdateManyInput
  invoices: InvoiceUpdateManyInput
}

input UserBillingUpsertWithoutForUserInput {
  update: UserBillingUpdateWithoutForUserDataInput!
  create: UserBillingCreateWithoutForUserInput!
}

input UserBillingWhereInput {
  """Logical AND on all given filters."""
  AND: [UserBillingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  stripeCustomerId: String

  """All values that are not equal to given value."""
  stripeCustomerId_not: String

  """All values that are contained in given list."""
  stripeCustomerId_in: [String!]

  """All values that are not contained in given list."""
  stripeCustomerId_not_in: [String!]

  """All values less than the given value."""
  stripeCustomerId_lt: String

  """All values less than or equal the given value."""
  stripeCustomerId_lte: String

  """All values greater than the given value."""
  stripeCustomerId_gt: String

  """All values greater than or equal the given value."""
  stripeCustomerId_gte: String

  """All values containing the given string."""
  stripeCustomerId_contains: String

  """All values not containing the given string."""
  stripeCustomerId_not_contains: String

  """All values starting with the given string."""
  stripeCustomerId_starts_with: String

  """All values not starting with the given string."""
  stripeCustomerId_not_starts_with: String

  """All values ending with the given string."""
  stripeCustomerId_ends_with: String

  """All values not ending with the given string."""
  stripeCustomerId_not_ends_with: String
  defaultPaymentMethod: PaymentMethodWhereInput
  paymentMethods_some: PaymentMethodWhereInput
  associatedPlans_some: ProductPlanWhereInput
  invoices_some: InvoiceWhereInput
  forUser: UserWhereInput
}

input UserBillingWhereUniqueInput {
  id: ID
  stripeCustomerId: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  activated: Boolean
  activationKey: String
  salt: String!
  password: String!
  name: String!
  roles: RoleCreateManyWithoutAttachedToInput
  billing: UserBillingCreateOneWithoutForUserInput
}

input UserCreateManyWithoutRolesInput {
  create: [UserCreateWithoutRolesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBillingInput {
  create: UserCreateWithoutBillingInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBillingInput {
  email: String!
  activated: Boolean
  activationKey: String
  salt: String!
  password: String!
  name: String!
  roles: RoleCreateManyWithoutAttachedToInput
}

input UserCreateWithoutRolesInput {
  email: String!
  activated: Boolean
  activationKey: String
  salt: String!
  password: String!
  name: String!
  billing: UserBillingCreateOneWithoutForUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  activated_ASC
  activated_DESC
  activationKey_ASC
  activationKey_DESC
  salt_ASC
  salt_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  email: String!
  activated: Boolean!
  activationKey: String
  salt: String!
  password: String!
  name: String!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  activated: Boolean

  """All values that are not equal to given value."""
  activated_not: Boolean
  activationKey: String

  """All values that are not equal to given value."""
  activationKey_not: String

  """All values that are contained in given list."""
  activationKey_in: [String!]

  """All values that are not contained in given list."""
  activationKey_not_in: [String!]

  """All values less than the given value."""
  activationKey_lt: String

  """All values less than or equal the given value."""
  activationKey_lte: String

  """All values greater than the given value."""
  activationKey_gt: String

  """All values greater than or equal the given value."""
  activationKey_gte: String

  """All values containing the given string."""
  activationKey_contains: String

  """All values not containing the given string."""
  activationKey_not_contains: String

  """All values starting with the given string."""
  activationKey_starts_with: String

  """All values not starting with the given string."""
  activationKey_not_starts_with: String

  """All values ending with the given string."""
  activationKey_ends_with: String

  """All values not ending with the given string."""
  activationKey_not_ends_with: String
  salt: String

  """All values that are not equal to given value."""
  salt_not: String

  """All values that are contained in given list."""
  salt_in: [String!]

  """All values that are not contained in given list."""
  salt_not_in: [String!]

  """All values less than the given value."""
  salt_lt: String

  """All values less than or equal the given value."""
  salt_lte: String

  """All values greater than the given value."""
  salt_gt: String

  """All values greater than or equal the given value."""
  salt_gte: String

  """All values containing the given string."""
  salt_contains: String

  """All values not containing the given string."""
  salt_not_contains: String

  """All values starting with the given string."""
  salt_starts_with: String

  """All values not starting with the given string."""
  salt_not_starts_with: String

  """All values ending with the given string."""
  salt_ends_with: String

  """All values not ending with the given string."""
  salt_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  activated: Boolean
  activationKey: String
  salt: String
  password: String
  name: String
  roles: RoleUpdateManyWithoutAttachedToInput
  billing: UserBillingUpdateOneWithoutForUserInput
}

input UserUpdateInput {
  email: String
  activated: Boolean
  activationKey: String
  salt: String
  password: String
  name: String
  roles: RoleUpdateManyWithoutAttachedToInput
  billing: UserBillingUpdateOneWithoutForUserInput
}

input UserUpdateManyDataInput {
  email: String
  activated: Boolean
  activationKey: String
  salt: String
  password: String
  name: String
}

input UserUpdateManyMutationInput {
  email: String
  activated: Boolean
  activationKey: String
  salt: String
  password: String
  name: String
}

input UserUpdateManyWithoutRolesInput {
  create: [UserCreateWithoutRolesInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRolesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRolesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutBillingInput {
  create: UserCreateWithoutBillingInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutBillingDataInput
  upsert: UserUpsertWithoutBillingInput
}

input UserUpdateWithoutBillingDataInput {
  email: String
  activated: Boolean
  activationKey: String
  salt: String
  password: String
  name: String
  roles: RoleUpdateManyWithoutAttachedToInput
}

input UserUpdateWithoutRolesDataInput {
  email: String
  activated: Boolean
  activationKey: String
  salt: String
  password: String
  name: String
  billing: UserBillingUpdateOneWithoutForUserInput
}

input UserUpdateWithWhereUniqueWithoutRolesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRolesDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutBillingInput {
  update: UserUpdateWithoutBillingDataInput!
  create: UserCreateWithoutBillingInput!
}

input UserUpsertWithWhereUniqueWithoutRolesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRolesDataInput!
  create: UserCreateWithoutRolesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  activated: Boolean

  """All values that are not equal to given value."""
  activated_not: Boolean
  activationKey: String

  """All values that are not equal to given value."""
  activationKey_not: String

  """All values that are contained in given list."""
  activationKey_in: [String!]

  """All values that are not contained in given list."""
  activationKey_not_in: [String!]

  """All values less than the given value."""
  activationKey_lt: String

  """All values less than or equal the given value."""
  activationKey_lte: String

  """All values greater than the given value."""
  activationKey_gt: String

  """All values greater than or equal the given value."""
  activationKey_gte: String

  """All values containing the given string."""
  activationKey_contains: String

  """All values not containing the given string."""
  activationKey_not_contains: String

  """All values starting with the given string."""
  activationKey_starts_with: String

  """All values not starting with the given string."""
  activationKey_not_starts_with: String

  """All values ending with the given string."""
  activationKey_ends_with: String

  """All values not ending with the given string."""
  activationKey_not_ends_with: String
  salt: String

  """All values that are not equal to given value."""
  salt_not: String

  """All values that are contained in given list."""
  salt_in: [String!]

  """All values that are not contained in given list."""
  salt_not_in: [String!]

  """All values less than the given value."""
  salt_lt: String

  """All values less than or equal the given value."""
  salt_lte: String

  """All values greater than the given value."""
  salt_gt: String

  """All values greater than or equal the given value."""
  salt_gte: String

  """All values containing the given string."""
  salt_contains: String

  """All values not containing the given string."""
  salt_not_contains: String

  """All values starting with the given string."""
  salt_starts_with: String

  """All values not starting with the given string."""
  salt_not_starts_with: String

  """All values ending with the given string."""
  salt_ends_with: String

  """All values not ending with the given string."""
  salt_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  roles_some: RoleWhereInput
  billing: UserBillingWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
