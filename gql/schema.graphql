# import Role, BillingType, CloudProvider, UpdateMethod, OperationType, ServiceType from "./generated/prisma.graphql"

scalar DateTime
scalar Json
scalar Integer
scalar Float
scalar Int
scalar Upload

# directives
directive @private on QUERY | FIELD | FIELD_DEFINITION | MUTATION
directive @isAuthenticated on QUERY | FIELD | FIELD_DEFINITION | MUTATION
directive @hasPermissions(permissions: [String]) on QUERY | FIELD | FIELD_DEFINITION | MUTATION

type Query {
  info: String!
  roles: [Role]! @isAuthenticated @hasPermissions(permissions: ["SYSTEM_MANAGE_ROLES"])
  currentUser: User! @isAuthenticated
  products: [Product]!
  product(productId: String!): Product!
  productPlan(planId: String!): ProductPlan!
  productsForService(service: ServiceType! active: Boolean): [Product]!
  productPlans(productId: String!): [ProductPlan]!

  # keybot service queries
  ownedKeybotServices: [KeybotService]! @isAuthenticated
  ownedKeybotService(serviceId: String!): [KeybotService]! @isAuthenticated
  keybotServiceCredentials(serviceId: String!): [KeybotCredentials]! @isAuthenticated
  keybotCustomFiles(serviceId: String!): OperationResponse! @isAuthenticated
}

type Mutation {
  createUser(email: String!, password: String!, name: String!): User!
  registerUser(email: String!, password: String!, name: String!): AuthPayload!
  sendEmailActivation: OperationResponse! @isAuthenticated
  verifyAccount(token: String!): OperationResponse! @isAuthenticated
  login(email: String!, password: String!): AuthPayload!
  addPaymentMethod(token: String!): OperationResponse! @isAuthenticated
  
  createRole(name: String!, permissions: String): Role!
  updateRole(id: ID!, name: String, permissions: String): Role!
  deleteRole(id: ID!): OperationResponse!

  # admin mutations
  createProduct(name: String!, forService: ServiceType!): OperationResponse! @isAuthenticated @hasPermissions(permissions: ["SYSTEM_IS_ADMIN"])
  createProductPlan(productId: String!, title: String!, description: String!, price: Float!, billingType: BillingType!): OperationResponse! @isAuthenticated @hasPermissions(permissions: ["SYSTEM_IS_ADMIN"])

  # Keybot service mutations
  createKeybotService(name: String!, updateType: UpdateMethod!): OperationResponse! @isAuthenticated
  uploadCustomFile(file: Upload!, filePath: String!, fileType: String!, viewPath: String, serviceId: String!): OperationResponse! @isAuthenticated
  deleteCustomFile(serviceId: String!, filePath: String!): OperationResponse! @isAuthenticated
  deployService(id: String!): OperationResponse! @isAuthenticated

  # updateKeybotCredentials(serviceId: String!, production: Boolean!, sessionSecret: String!, mongoUrl: String!, discordToken: String!, encryptionKey: String!): KeybotCredentials! @isAuthenticated
  updateKeybotCredentials(serviceId: String!, data: Json!): OperationResponse! @isAuthenticated
}

type User {
  id: ID!
  createdAt: DateTime!
  email: String!
  activated: Boolean!
  activationKey: String
  salt: String!
  password: String!
  name: String!
  roles: [Role]!
  billing: UserBilling
}

type UserBilling {
  id: ID!
  createdAt: DateTime!
  stripeCustomerId: String!
  defaultPaymentMethod: PaymentMethod
  paymentMethods: [PaymentMethod]
  associatedPlans: [ProductPlan]!
  invoices: [Invoice]!
  forUser: User!
}

type PaymentMethod {
  id: ID!
  stripeSourceId: String!
  cardBrand: String!
  expMonth: Int!
  expYear: Int!
  lastFour: String!
}

type Invoice {
  id: ID!
  createdAt: DateTime!
  plansInvoiced: [ProductPlan]!
  totalCharged: Float!
}

type Product {
  id: ID!
  name: String!
  createdAt: DateTime!
  forService: ServiceType
  plans: [ProductPlan]
  stripeProductId: String! @isAuthenticated @hasPermissions(permissions: ["SYSTEM_IS_ADMIN"])
}

type ProductPlan {
  id: ID!
  createdAt: DateTime!
  title: String!
  product: Product!
  hidden: Boolean!
  active: Boolean!
  description: String
  features: [String]!
  price: Float!
  price_currency: String!
  priceFluctuates: Boolean!
  billingType: BillingType
  serviceEntitlements: Json
  requiresContact: Boolean!
  stripePlanId: String!
}

type KeybotService {
  id: ID!
  name: String!
  createdAt: DateTime! @private
  owner: User!
  cloudProvider: CloudProvider!
  cloudResourceId: String @private
  currentOperation: OperationType
  currentOperationStatus: String
  currentVersion: String
  lastDeploy: DateTime
  updateType: UpdateMethod
  credentials: KeybotCredentials
  customFiles: Json
}

type KeybotCredentials {
  id: ID!
  forService: KeybotService!
  createdAt: DateTime!
  production: Boolean
  sessionSecret: String!
  mongoUrl: String!
  discordToken: String!
  encryptionKey: String!
}

type OperationResponse {
  resourceId: ID
  status: Integer!
  error: String
  message: String
}

type AuthPayload {
  error: String
  token: String
  isAdmin: Boolean
  user: User
}